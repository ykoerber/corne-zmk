/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define SYM_L 1
#define SYM_R 2
#define NUM 3
#define NAV 4
#define FN 5
#define SETTINGS 6
#define INTJ 7

//push-to-talk hotkey
#define PTT LG(LA(LC(LS(G))))

#define COMBO_TIMEOUT 60

/ {

        conditional_layers {        
            compatible = "zmk,conditional-layers";        
            fn_layer {            
                if-layers = <SYM_L SYM_R>;            
                then-layer = <FN>;        
            };    

            fn_layer {            
                if-layers = <NUM NAV>;            
                then-layer = <SETTINGS>;        
            };    
        };

        ///  0  1  2  3  4  5      6  7  8  9 10 11
        /// 12 13 14 15 16 17     18 19 20 21 22 23
        /// 24 25 26 27 28 29     30 31 32 33 34 35
        ///          36 37 38     39 40 41

     combos {
        compatible = "zmk,combos";
        
        //mute
        combo_mute {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <5 6>;
            bindings = <&kp LG(LA(LC(LS(M))))>;
        };      

        // caps word
        combo_caps_word {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 11>;
            bindings = <&caps_word>;
        };
    };

    behaviors {
    //     //intellij: start app in debug with one tap. stop it with two taps
        td_intj_debug: td_intj_debug {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_INTELLIJ_DEBUG";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LA(LS(F9))>, <&kp LC(F2)>;
        };

        //intellij: tap dance for: open class | open file
        td_intj_files: td_intj_files {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_INTELLIJ_FILES";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(LS(K))>, <&kp LC(LS(N))>;
        };
        td_nav_ptt: td_nav_ptt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_NAV_PTT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&to NAV>, <&kp PTT>;
        };

        //sticky keys with quick-release. avoid that the more than key is affected by the sticky key. happens if the first key after the sticky is hold down
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
    };
        
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &skq LSHFT &kp Q  &kp W  &kp E   &kp R  &kp T                         &kp Y &kp U   &kp I       &kp O           &kp P           &skq LSHFT
   &kp BSPC   &kp A  &kp S  &kp D   &kp F  &kp G                         &kp H &kp J   &kp K       &kp L   &kp SEMI   &kp RET
   &kp TAB    &kp Z  &kp X  &kp C   &kp V  &kp B                         &kp N &kp M   &kp COMMA   &kp DOT         &kp ESC         &kp DEL
                  &kp PTT    &lt SYM_R SPACE  &mo NAV               &mo NUM    &lt SYM_L ESC   &sl INTJ
                        >;
                };
                symbol_left {
                        bindings = <
   &trans    &kp AT    &kp DLLR         &kp LPAR       &kp RPAR  &kp PRCNT       &none &none  &none  &none  &none      &trans
   &trans   &kp APOS   &kp SLASH        &kp LBKT       &kp RBKT  &kp DQT         &none &sk LSHIFT &sk LCTRL   &sk LALT  &sk LWIN   &trans
   &trans   &kp TILDE  &kp UNDERSCORE   &kp LBRC       &kp RBRC  &kp HASH        &none &none  &none  &none  &none      &trans
                          	   &trans    &trans   &trans                    &trans    &trans   &trans
                        >;
                };

                symbol_right {
                        bindings = <
   &trans   &none &none  &none  &none  &none                                 &kp EXCL &kp QMARK         &kp PLUS         &kp STAR            &kp CARET      &trans
   &trans   &sk LWIN    &sk LALT    &sk LCTRL   &sk LSHIFT &trans            &kp AMPS &kp EQUAL   &kp MINUS  &kp BACKSLASH  &kp GRAVE &trans
   &trans  &none &none  &none  &none  &none                                  &kp PIPE &none      &kp LT           &kp GT              &kp COLON      &trans
                          	   &trans    &trans      &trans          &trans    &trans   &trans
                        >;
                };

                number {
                        bindings = <
   &trans &none        &kp N7           &kp N8          &kp N9         &none &none  &none  &none  &none      &trans
   &trans &kp N0  &kp N4      &kp N5    &kp N6   &kp DOT               &none   &sk LSHIFT &sk LCTRL   &sk LALT  &sk LWIN   &trans
   &trans &none        &kp N1           &kp N2          &kp N3         &none &none  &none  &none  &none      &trans
                          	        &trans          &trans    &trans           &trans  &trans        &trans
                        >;
                };

                nav {
                        bindings = <
&trans   &caps_word     &kp C_PREV &kp C_PLAY_PAUSE &kp C_NEXT  &kp C_MUTE          &trans      &kp PAGE_UP &kp UP        &kp PAGE_DOWN   &kp PAUSE_BREAK  &trans
&trans   &kp LWIN       &kp LALT   &kp LCTRL        &kp LSHFT   &kp C_VOL_UP        &none       &kp LEFT    &kp DOWN      &kp RIGHT       &kp K_APP        &trans
&trans   &none   &kp LC(X)  &kp LC(C)        &kp LC(V)   &kp C_VOL_DN        &none       &kp HOME    &kp END       &none           &to INTELLIJ     &trans
                                   &trans           &trans &trans              &trans      &trans      &trans
                        >;
                };

                fn {
                        bindings = <
    &trans   &none &none  &none  &none  &none                            &none   &kp F7   &kp F8  &kp F9   &kp F10  &trans
    &trans   &sk LWIN  &sk LALT &sk LCTRL &sk LSHIFT &trans       &none   &kp F4   &kp F5  &kp F6   &kp F11  &trans
    &trans   &none &none  &none  &none  &none                            &none   &kp F1   &kp F2  &kp F3   &kp F12   &trans
                     &trans  &trans    &trans            &trans  &trans  &trans
                        >;
                };


                settings {
                        bindings = <
&none    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4            &out OUT_BLE &out OUT_USB &none &none &none &none
&none    &none        &none        &none         &none         &bt BT_CLR              &none        &none        &none &none &none &none 
&none    &none        &none        &none         &none         &none                   &none        &none        &none &none &none &none
                                   &trans        &to DEFAULT   &trans                  &trans       &trans       &trans
                        >;
                };

                intellij {
                        bindings = <
&trans   &kp LC(Q)       &none         &kp LC(F1) &kp LA(LC(LS(T))) &kp LC(LS(LA(F11)))          &none       &kp LC(LA(F7)) &none      &kp LA(N5)    &kp LA(N1) &trans
&trans    &kp LC(LS(S))   &kp LA(LC(LS(N2)))    &td_intj_debug &kp LA(LC(L))     &kp LC(LS(LA(G)))          &kp LC(P)   &none      &none      &kp LC(LS(E)) &none &trans
&trans    &kp LA(LC(LS(N1)))      &kp LC(LS(R)) &kp LC(LS(LA(N3)))  &kp LC(LS(LA(F3)))     &kp LS(F11)          &kp LC(LS(A))       &td_intj_files      &kp LS(F2) &kp F2         &none &trans
                                       &trans     &trans       &trans               &trans      &trans     &trans
                        >;
                };
        };
};
